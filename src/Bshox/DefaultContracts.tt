<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".g.cs" #>
// This file was generated by a T4 Text Template. Modify "DefaultContracts.tt" instead of editing this file directly.
#nullable enable
#pragma warning disable CA1720 // Identifier contains type name

namespace Bshox;

partial class DefaultContracts
{
<#
// load GeneratedContracts.json
string filePath = this.Host.ResolvePath("../GeneratedContracts.json");
string json = File.ReadAllText(filePath);
var contracts = JsonSerializer.Deserialize<Contracts>(json);
foreach (var type in contracts.Primitives)
{
#>
    /// <summary>
    /// A Bshox contract for <c><#= type.Type #></c>
    /// </summary>
    public static BshoxContract<<#= type.Type #>> <#= type.Name #> { get; } = new <#= type.Name #>Contract();

    private sealed partial class <#= type.Name #>Contract() : BshoxContract<<#= type.Type #>>(BshoxCode.<#= type.Encoding #>)<#= type.SpanOptimized ? ($", ISpanContract<{type.Type}>") : "" #>
    {
<#
if (type.Write is null)
{
#>
        public override partial void Deserialize(ref BshoxReader reader, out <#= type.Type #> value);
        public override partial void Serialize(ref BshoxWriter writer, scoped ref readonly <#= type.Type #> value);
<#
}
else
{
#>
        public override void Deserialize(ref BshoxReader reader, out <#= type.Type #> value) => value = <#= type.Read #>;
        public override void Serialize(ref BshoxWriter writer, scoped ref readonly <#= type.Type #> value) => <#= string.Format(type.Write, "value") #>;
<#
}
if (type.SpanOptimized)
{
#>
        public partial void Deserialize(ref BshoxReader reader, Span<<#= type.Type #>> destination);
        public partial void Serialize(ref BshoxWriter writer, ReadOnlySpan<<#= type.Type #>> values);
<#
}
#>
    }

<#
}
#>
}
<#+
class Contracts
{
    public Primitive[] Primitives { get; set; }
}

class Contract
{
    public string Name { get; set; }
    public string Type { get; set; }
}

class Primitive : Contract
{
    public string Encoding { get; set; }
    public string Read { get; set; }
    public string Write { get; set; }
    public bool SpanOptimized { get; set; }
}
#>
