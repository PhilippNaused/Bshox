// This file was generated by a T4 Text Template. Modify "SurrogateContracts.tt" instead of editing this file directly.
#nullable enable

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for <see cref="System.Collections.Generic.IDictionary{TKey, TValue}"/>
        /// </summary>
        public static BshoxContract<System.Collections.Generic.IDictionary<TKey, TValue>> IDictionary<TKey, TValue>(BshoxContract<Dictionary<TKey, TValue>> contract) where TKey : notnull
        {
            return new Contracts.IDictionaryContract<TKey, TValue>(contract);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class IDictionaryContract<TKey, TValue>(BshoxContract<Dictionary<TKey, TValue>> contract) : BshoxContract<System.Collections.Generic.IDictionary<TKey, TValue>>(contract.Encoding) where TKey : notnull
    {
        public override void Deserialize(ref BshoxReader reader, out System.Collections.Generic.IDictionary<TKey, TValue> value)
        {
            contract.Deserialize(ref reader, out var surrogate);
            value = surrogate;
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly System.Collections.Generic.IDictionary<TKey, TValue> value)
        {
            if (value is not Dictionary<TKey, TValue> surrogate)
                surrogate = new Dictionary<TKey, TValue>(value);
            contract.Serialize(ref writer, in surrogate);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for <see cref="System.Collections.Generic.IList{T}"/>
        /// </summary>
        public static BshoxContract<System.Collections.Generic.IList<T>> IList<T>(BshoxContract<List<T>> contract)
        {
            return new Contracts.IListContract<T>(contract);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class IListContract<T>(BshoxContract<List<T>> contract) : BshoxContract<System.Collections.Generic.IList<T>>(contract.Encoding)
    {
        public override void Deserialize(ref BshoxReader reader, out System.Collections.Generic.IList<T> value)
        {
            contract.Deserialize(ref reader, out var surrogate);
            value = surrogate;
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly System.Collections.Generic.IList<T> value)
        {
            if (value is not List<T> surrogate)
                surrogate = [.. value];
            contract.Serialize(ref writer, in surrogate);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for <see cref="System.Collections.Concurrent.ConcurrentDictionary{TKey, TValue}"/>
        /// </summary>
        public static BshoxContract<System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>> ConcurrentDictionary<TKey, TValue>(BshoxContract<Dictionary<TKey, TValue>> contract) where TKey : notnull
        {
            return new Contracts.ConcurrentDictionaryContract<TKey, TValue>(contract);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ConcurrentDictionaryContract<TKey, TValue>(BshoxContract<Dictionary<TKey, TValue>> contract) : BshoxContract<System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>>(contract.Encoding) where TKey : notnull
    {
        public override void Deserialize(ref BshoxReader reader, out System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> value)
        {
            contract.Deserialize(ref reader, out var surrogate);
            value = new System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>(surrogate);
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> value)
        {
            if (value is not Dictionary<TKey, TValue> surrogate)
                surrogate = new Dictionary<TKey, TValue>(value);
            contract.Serialize(ref writer, in surrogate);
        }
    }
}
