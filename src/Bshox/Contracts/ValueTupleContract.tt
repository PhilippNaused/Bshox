<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".g.cs" #>
// This file was generated by a T4 Text Template. Modify "ValueTupleContract.tt" instead of editing this file directly.
#nullable enable

using System.Diagnostics.CodeAnalysis;
<#
for(var i = 1; i <= 8; i++) {
    Func<int, string> ParameterName = x => (x == 8) ? "TRest" : $"T{x}";
    Func<int, string> ItemName = x => (x == 8) ? "Rest" : $"Item{x}";
    Func<int, string> Contract = x => $"contract{x}";
    string genericParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => ParameterName(x)));
    string typeName = $"ValueTuple<{genericParameters}>";
    string ctorParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"BshoxContract<{ParameterName(x)}> {Contract(x)}"));
#>

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{<#= genericParameters #>}"/>
        /// </summary>
        public static BshoxContract<<#= typeName #>> ValueTuple<<#= genericParameters #>>(<#= ctorParameters #>)<#= ((i == 8) ? " where TRest : struct" : "") #>
        {
            return new Contracts.ValueTupleContract<<#= genericParameters #>>(<#= string.Join(", ", Enumerable.Range(1, i).Select(x => Contract(x))) #>);
        }
    }
}

namespace Bshox.Contracts
{
    [ExcludeFromCodeCoverage]
    internal sealed class ValueTupleContract<<#= genericParameters #>>(<#= ctorParameters #>) : BshoxContract<<#= typeName #>>(BshoxCode.SubObject)<#= ((i == 8) ? " where TRest : struct" : "") #>
    {
        public override void Deserialize(ref BshoxReader reader, out <#= typeName #> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, 0);
                        return;
                    }
<# for(var j = 1; j <= i; j++) { #>
                    case <#= j #>:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, <#= Contract(j) #>.Encoding);
                        <#= Contract(j) #>.Deserialize(ref reader, out value.<#= ItemName(j) #>);
                        break;
                    }
<# } #>
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly <#= typeName #> value)
        {
<# for(var j = 1; j <= i; j++) { #>
            writer.WriteTag(<#= j #>, <#= Contract(j) #>.Encoding);
            <#= Contract(j) #>.Serialize(ref writer, in value.<#= ItemName(j) #>);

<# } #>
            writer.WriteByte(0);
        }
    }
}
<# } #>
