<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Text.Json" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".g.cs" #>
// This file was generated by a T4 Text Template. Modify "SurrogateContracts.tt" instead of editing this file directly.
#nullable enable

using System.Diagnostics.CodeAnalysis;
<#
    // load GeneratedContracts.json
    string filePath = this.Host.ResolvePath("../../GeneratedContracts.json");
    string json = File.ReadAllText(filePath);
    var contracts = JsonSerializer.Deserialize<Contracts>(json);
    foreach (var surrogate in contracts.Surrogates)
    {
        string xml = surrogate.Type.Replace('<', '{').Replace('>', '}');
        int idx = surrogate.Type.IndexOf('<');
        string generics = idx > 0 ? surrogate.Type.Substring(idx) : "";
        string postFix = surrogate.Where is null ? "" : $" where {surrogate.Where}";
#>

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for <see cref="<#= xml #>"/>
        /// </summary>
        public static BshoxContract<<#= surrogate.Type #>> <#= surrogate.Name #><#= generics #>(BshoxContract<<#= surrogate.SurrogateType #>> contract)<#= postFix #>
        {
            return new Contracts.<#= surrogate.Name #>Contract<#= generics #>(contract);
        }
    }
}

namespace Bshox.Contracts
{
    [ExcludeFromCodeCoverage]
    internal sealed class <#= surrogate.Name #>Contract<#= generics #>(BshoxContract<<#= surrogate.SurrogateType #>> contract) : BshoxContract<<#= surrogate.Type #>>(contract.Encoding)<#= postFix #>
    {
        public override void Deserialize(ref BshoxReader reader, out <#= surrogate.Type #> value)
        {
            contract.Deserialize(ref reader, out var surrogate);
            value = <#= surrogate.From #>;
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly <#= surrogate.Type #> value)
        {
            if (value is not <#= surrogate.SurrogateType #> surrogate)
                surrogate = <#= surrogate.To #>;
            contract.Serialize(ref writer, in surrogate);
        }
    }
}
<#
    }
#>
<#+
    class Contracts
    {
        public Surrogate[] Surrogates { get; set; }
    }

    class Contract
    {
        public string Name { get; set; }
        public string Type { get; set; }
    }

    class Surrogate : Contract
    {
        public string SurrogateType { get; set; }
        public string To { get; set; }
        public string From { get; set; }
        public string Where { get; set; }
    }
#>

