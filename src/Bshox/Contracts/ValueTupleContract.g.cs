// This file was generated by a T4 Text Template. Modify "ValueTupleContract.tt" instead of editing this file directly.
#nullable enable

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1>> ValueTuple<T1>(BshoxContract<T1> contract1)
        {
            return new Contracts.ValueTupleContract<T1>(contract1);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1>(BshoxContract<T1> contract1) : BshoxContract<ValueTuple<T1>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2>> ValueTuple<T1, T2>(BshoxContract<T1> contract1, BshoxContract<T2> contract2)
        {
            return new Contracts.ValueTupleContract<T1, T2>(contract1, contract2);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2>(BshoxContract<T1> contract1, BshoxContract<T2> contract2) : BshoxContract<ValueTuple<T1, T2>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3>> ValueTuple<T1, T2, T3>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3)
        {
            return new Contracts.ValueTupleContract<T1, T2, T3>(contract1, contract2, contract3);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3) : BshoxContract<ValueTuple<T1, T2, T3>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3, T4}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3, T4>> ValueTuple<T1, T2, T3, T4>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4)
        {
            return new Contracts.ValueTupleContract<T1, T2, T3, T4>(contract1, contract2, contract3, contract4);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3, T4>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4) : BshoxContract<ValueTuple<T1, T2, T3, T4>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3, T4> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    case 4:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract4.Encoding);
                        contract4.Deserialize(ref reader, out value.Item4);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3, T4> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteTag(4, contract4.Encoding);
            contract4.Serialize(ref writer, in value.Item4);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3, T4, T5}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3, T4, T5>> ValueTuple<T1, T2, T3, T4, T5>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5)
        {
            return new Contracts.ValueTupleContract<T1, T2, T3, T4, T5>(contract1, contract2, contract3, contract4, contract5);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3, T4, T5>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5) : BshoxContract<ValueTuple<T1, T2, T3, T4, T5>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3, T4, T5> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    case 4:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract4.Encoding);
                        contract4.Deserialize(ref reader, out value.Item4);
                        break;
                    }
                    case 5:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract5.Encoding);
                        contract5.Deserialize(ref reader, out value.Item5);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3, T4, T5> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteTag(4, contract4.Encoding);
            contract4.Serialize(ref writer, in value.Item4);

            writer.WriteTag(5, contract5.Encoding);
            contract5.Serialize(ref writer, in value.Item5);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3, T4, T5, T6}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6>> ValueTuple<T1, T2, T3, T4, T5, T6>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6)
        {
            return new Contracts.ValueTupleContract<T1, T2, T3, T4, T5, T6>(contract1, contract2, contract3, contract4, contract5, contract6);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3, T4, T5, T6>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6) : BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3, T4, T5, T6> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    case 4:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract4.Encoding);
                        contract4.Deserialize(ref reader, out value.Item4);
                        break;
                    }
                    case 5:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract5.Encoding);
                        contract5.Deserialize(ref reader, out value.Item5);
                        break;
                    }
                    case 6:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract6.Encoding);
                        contract6.Deserialize(ref reader, out value.Item6);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3, T4, T5, T6> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteTag(4, contract4.Encoding);
            contract4.Serialize(ref writer, in value.Item4);

            writer.WriteTag(5, contract5.Encoding);
            contract5.Serialize(ref writer, in value.Item5);

            writer.WriteTag(6, contract6.Encoding);
            contract6.Serialize(ref writer, in value.Item6);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3, T4, T5, T6, T7}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6, T7>> ValueTuple<T1, T2, T3, T4, T5, T6, T7>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6, BshoxContract<T7> contract7)
        {
            return new Contracts.ValueTupleContract<T1, T2, T3, T4, T5, T6, T7>(contract1, contract2, contract3, contract4, contract5, contract6, contract7);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3, T4, T5, T6, T7>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6, BshoxContract<T7> contract7) : BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6, T7>>(BshoxCode.SubObject)
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3, T4, T5, T6, T7> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    case 4:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract4.Encoding);
                        contract4.Deserialize(ref reader, out value.Item4);
                        break;
                    }
                    case 5:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract5.Encoding);
                        contract5.Deserialize(ref reader, out value.Item5);
                        break;
                    }
                    case 6:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract6.Encoding);
                        contract6.Deserialize(ref reader, out value.Item6);
                        break;
                    }
                    case 7:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract7.Encoding);
                        contract7.Deserialize(ref reader, out value.Item7);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3, T4, T5, T6, T7> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteTag(4, contract4.Encoding);
            contract4.Serialize(ref writer, in value.Item4);

            writer.WriteTag(5, contract5.Encoding);
            contract5.Serialize(ref writer, in value.Item5);

            writer.WriteTag(6, contract6.Encoding);
            contract6.Serialize(ref writer, in value.Item6);

            writer.WriteTag(7, contract7.Encoding);
            contract7.Serialize(ref writer, in value.Item7);

            writer.WriteByte(0);
        }
    }
}

namespace Bshox
{
    partial class DefaultContracts
    {
        /// <summary>
        /// A Bshox contract for a <see cref="System.ValueTuple{T1, T2, T3, T4, T5, T6, T7, TRest}"/>
        /// </summary>
        public static BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>> ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6, BshoxContract<T7> contract7, BshoxContract<TRest> contract8) where TRest : struct
        {
            return new Contracts.ValueTupleContract<T1, T2, T3, T4, T5, T6, T7, TRest>(contract1, contract2, contract3, contract4, contract5, contract6, contract7, contract8);
        }
    }
}

namespace Bshox.Contracts
{
    internal sealed class ValueTupleContract<T1, T2, T3, T4, T5, T6, T7, TRest>(BshoxContract<T1> contract1, BshoxContract<T2> contract2, BshoxContract<T3> contract3, BshoxContract<T4> contract4, BshoxContract<T5> contract5, BshoxContract<T6> contract6, BshoxContract<T7> contract7, BshoxContract<TRest> contract8) : BshoxContract<ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest>>(BshoxCode.SubObject) where TRest : struct
    {
        public override void Deserialize(ref BshoxReader reader, out ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value)
        {
            value = default;
            while (true)
            {
                uint key = reader.ReadTag(out var encoding);
                switch (key)
                {
                    case 0:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, BshoxCode.Null);
                        return;
                    }
                    case 1:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract1.Encoding);
                        contract1.Deserialize(ref reader, out value.Item1);
                        break;
                    }
                    case 2:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract2.Encoding);
                        contract2.Deserialize(ref reader, out value.Item2);
                        break;
                    }
                    case 3:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract3.Encoding);
                        contract3.Deserialize(ref reader, out value.Item3);
                        break;
                    }
                    case 4:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract4.Encoding);
                        contract4.Deserialize(ref reader, out value.Item4);
                        break;
                    }
                    case 5:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract5.Encoding);
                        contract5.Deserialize(ref reader, out value.Item5);
                        break;
                    }
                    case 6:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract6.Encoding);
                        contract6.Deserialize(ref reader, out value.Item6);
                        break;
                    }
                    case 7:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract7.Encoding);
                        contract7.Deserialize(ref reader, out value.Item7);
                        break;
                    }
                    case 8:
                    {
                        BshoxException.ThrowIfWrongEncoding(encoding, contract8.Encoding);
                        contract8.Deserialize(ref reader, out value.Rest);
                        break;
                    }
                    default:
                        throw BshoxException.InvalidEncoding(encoding);
                }
            }
        }

        public override void Serialize(ref BshoxWriter writer, scoped ref readonly ValueTuple<T1, T2, T3, T4, T5, T6, T7, TRest> value)
        {
            writer.WriteTag(1, contract1.Encoding);
            contract1.Serialize(ref writer, in value.Item1);

            writer.WriteTag(2, contract2.Encoding);
            contract2.Serialize(ref writer, in value.Item2);

            writer.WriteTag(3, contract3.Encoding);
            contract3.Serialize(ref writer, in value.Item3);

            writer.WriteTag(4, contract4.Encoding);
            contract4.Serialize(ref writer, in value.Item4);

            writer.WriteTag(5, contract5.Encoding);
            contract5.Serialize(ref writer, in value.Item5);

            writer.WriteTag(6, contract6.Encoding);
            contract6.Serialize(ref writer, in value.Item6);

            writer.WriteTag(7, contract7.Encoding);
            contract7.Serialize(ref writer, in value.Item7);

            writer.WriteTag(8, contract8.Encoding);
            contract8.Serialize(ref writer, in value.Rest);

            writer.WriteByte(0);
        }
    }
}
