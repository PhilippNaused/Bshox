// This file was generated by a T4 Text Template. Modify "KnownTypeInfo.tt" instead of editing this file directly.

namespace Bshox.Generator.Contracts;

partial struct KnownTypeInfo
{
    private static readonly KnownTypeInfo SByte = new("SByte", "writer.WriteVarInt32(unchecked((byte){0}));", "unchecked((sbyte)checked((byte)reader.ReadVarInt32()))", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Byte = new("Byte", "writer.WriteVarInt32({0});", "checked((byte)reader.ReadVarInt32())", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Int16 = new("Int16", "writer.WriteVarInt32(unchecked((ushort){0}));", "unchecked((short)checked((ushort)reader.ReadVarInt32()))", BshoxCode.VarInt);
    private static readonly KnownTypeInfo UInt16 = new("UInt16", "writer.WriteVarInt32({0});", "checked((ushort)reader.ReadVarInt32())", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Char = new("Char", "writer.WriteVarInt32((uint){0});", "checked((char)reader.ReadVarInt32())", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Int32 = new("Int32", "writer.WriteVarInt32(unchecked((uint){0}));", "unchecked((int)reader.ReadVarInt32())", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Int32Z = new("Int32Z", "writer.WriteZigZagVarInt32({0});", "reader.ReadZigZagVarInt32()", BshoxCode.VarInt);
    private static readonly KnownTypeInfo UInt32 = new("UInt32", "writer.WriteVarInt32({0});", "reader.ReadVarInt32()", BshoxCode.VarInt);
    private static readonly KnownTypeInfo UInt64 = new("UInt64", "writer.WriteVarInt64({0});", "reader.ReadVarInt64()", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Int64 = new("Int64", "writer.WriteVarInt64(unchecked((ulong){0}));", "unchecked((long)reader.ReadVarInt64())", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Int64Z = new("Int64Z", "writer.WriteZigZagVarInt64({0});", "reader.ReadZigZagVarInt64()", BshoxCode.VarInt);
    private static readonly KnownTypeInfo Single = new("Single", "writer.WriteSingle({0});", "reader.ReadSingle()", BshoxCode.Fixed4);
    private static readonly KnownTypeInfo Double = new("Double", "writer.WriteDouble({0});", "reader.ReadDouble()", BshoxCode.Fixed8);
    private static readonly KnownTypeInfo String = new("String", "writer.WriteString({0});", "reader.ReadString()", BshoxCode.Prefixed);
    private static readonly KnownTypeInfo Boolean = new("Boolean", "writer.WriteByte({0} ? (byte)1 : (byte)0);", "reader.ReadByte() != 0", BshoxCode.VarInt);
    private static readonly KnownTypeInfo ByteArray = new("ByteArray", "writer.WriteByteArray({0});", "reader.ReadByteArray()", BshoxCode.Prefixed);
    private static readonly KnownTypeInfo Guid = new("Guid");
    private static readonly KnownTypeInfo DateTime = new("DateTime");
    private static readonly KnownTypeInfo TimeSpan = new("TimeSpan");
}
