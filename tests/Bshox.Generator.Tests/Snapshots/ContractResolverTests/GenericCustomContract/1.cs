// <auto-generated />
#nullable enable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.Serializer1;

namespace TestModels;

/// <summary>
/// A source generated Bshox serializer that can serialize the following types:
/// <para><see cref="global::TestModels.Type1{T}" /> (<c>T</c> is <see cref="int" />)</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
sealed partial class Serializer1 : bsx::BshoxSerializer
{
    private static readonly bsx::BshoxContract<global::TestModels.Type1<int>> c_Type1Int32;
    /// <summary>
    /// A source generated Bshox contract for <see cref="global::TestModels.Type1{T}" /> (<c>T</c> is <see cref="int" />)
    /// </summary>
    /// <remarks>
    /// Bshox member layout:
    /// <para><c>1</c>: <see cref="int" /> Value</para>
    /// </remarks>
    public static bsx::BshoxContract<global::TestModels.Type1<int>> Type1Int32 => c_Type1Int32;
    private static readonly bsx::BshoxContract<int> c_Int32;

    /// <summary>
    /// Singleton instance of <see cref="global::TestModels.Serializer1" />
    /// </summary>
    public static Serializer1 Instance { get; } = new Serializer1();

    static Serializer1()
    {
        c_Type1Int32 = new TestModels_Type1_3Cint_3E__BshoxContract();
        c_Int32 = bsx::DefaultContracts.Int32;
    }

    protected override bsx::IBshoxContract GetContractInternal(global::System.Type type)
    {
        if (type == typeof(global::TestModels.Type1<int>))
            return c_Type1Int32;
        if (type == typeof(int))
            return c_Int32;
        return null;
    }
}
