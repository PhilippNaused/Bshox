// <auto-generated />
#nullable disable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.Serializer1;

namespace TestModels;

/// <summary>
/// A source generated Bshox serializer that can serialize the following types:
/// <para><see cref="global::TestModels.Type1" /></para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
sealed partial class Serializer1 : bsx::BshoxSerializer
{
    private static readonly bsx::BshoxContract<global::TestModels.Type1> c_Type1;
    /// <summary>
    /// A source generated Bshox contract for <see cref="global::TestModels.Type1" />
    /// </summary>
    /// <remarks>
    /// Bshox member layout:
    /// <para><c>1</c>: <see cref="global::TestModels.MyEnum" /> Value1</para>
    /// <para><c>2</c>: <see cref="global::TestModels2.MyEnum" /> Value2</para>
    /// </remarks>
    public static bsx::BshoxContract<global::TestModels.Type1> Type1 => c_Type1;
    private static readonly bsx::BshoxContract<int> c_Int32;
    private static readonly bsx::BshoxContract<global::TestModels2.MyEnum> c_MyEnum;
    private static readonly bsx::BshoxContract<global::TestModels.MyEnum> c_MyEnum_1;

    /// <summary>
    /// Singleton instance of <see cref="global::TestModels.Serializer1" />
    /// </summary>
    public static Serializer1 Instance { get; } = new Serializer1();

    static Serializer1()
    {
        c_Type1 = new TestModels_Type1__BshoxContract();
        c_Int32 = bsx::DefaultContracts.Int32;
        c_MyEnum = bsx::DefaultContracts.Enum<global::TestModels2.MyEnum, int>(c_Int32);
        c_MyEnum_1 = bsx::DefaultContracts.Enum<global::TestModels.MyEnum, int>(c_Int32);
    }

    protected override bsx::IBshoxContract GetContractInternal(global::System.Type type)
    {
        if (type == typeof(global::TestModels.Type1))
            return c_Type1;
        if (type == typeof(int))
            return c_Int32;
        if (type == typeof(global::TestModels2.MyEnum))
            return c_MyEnum;
        if (type == typeof(global::TestModels.MyEnum))
            return c_MyEnum_1;
        return null;
    }
}
