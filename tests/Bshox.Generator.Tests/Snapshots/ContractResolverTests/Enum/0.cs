// <auto-generated />
#nullable disable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.Serializer1;

namespace TestModels;

partial class Serializer1
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
    private sealed class TestModels_Type1__BshoxContract : bsx::BshoxContract<global::TestModels.Type1>
    {
        internal TestModels_Type1__BshoxContract() : base(bsx::BshoxCode.SubObject)
        {
        }

        public override void Serialize(ref bsx::BshoxWriter writer, scoped ref readonly global::TestModels.Type1 value)
        {
            using var _ = writer.DepthLock();
            var __Value = value.Value;
            {
                writer.WriteTag(1, _gen_bshox_t.c_Enum1.Encoding);
                _gen_bshox_t.c_Enum1.Serialize(ref writer, in __Value);
            }
            writer.WriteByte(0);
        }

        public override void Deserialize(ref bsx::BshoxReader reader, out global::TestModels.Type1 value)
        {
            global::TestModels.Enum1 __Value = default;
            using var _ = reader.DepthLock();
            while (true)
            {
                uint key = reader.ReadTag(out bsx::BshoxCode encoding);
                switch (key)
                {
                    case 0:
                    {
                        bsx::BshoxException.ThrowIfWrongEncoding(encoding, bsx::BshoxCode.Null);
                        value = new global::TestModels.Type1
                        {
                            Value = __Value,
                        };
                        return;
                    }
                    case 1:
                    {
                        bsx::BshoxException.ThrowIfWrongEncoding(encoding, _gen_bshox_t.c_Enum1.Encoding);
                        _gen_bshox_t.c_Enum1.Deserialize(ref reader, out __Value);
                        break;
                    }
                    default:
                        reader.SkipValue(encoding);
                        break;
                }
            }
        }
    }
}
