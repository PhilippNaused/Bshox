// <auto-generated />
#nullable disable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.ValueTupleSerializer;

namespace TestModels;

/// <summary>
/// A source generated Bshox serializer that can serialize the following types:
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="int" />)</para>
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)</para>
/// <para>(<see cref="uint" />, <see cref="string" />, <see cref="byte" />)</para>
/// <para>(<see cref="int" />, <see cref="long" />)</para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
sealed partial class ValueTupleSerializer : bsx::BshoxSerializer
{
    private static readonly bsx::BshoxContract<int> c_Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int>> c_ValueTupleInt32Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int, int>>> c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32Int32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int, int>>> ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32Int32 => c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int>> c_ValueTupleInt32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int>> ValueTupleInt32 => c_ValueTupleInt32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int>>> c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int>>> ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32 => c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int>> c_ValueTupleInt32Int32Int32Int32Int32Int32Int32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int, int>> ValueTupleInt32Int32Int32Int32Int32Int32Int32 => c_ValueTupleInt32Int32Int32Int32Int32Int32Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int>> c_ValueTupleInt32Int32Int32Int32Int32Int32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int, int>> ValueTupleInt32Int32Int32Int32Int32Int32 => c_ValueTupleInt32Int32Int32Int32Int32Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int>> c_ValueTupleInt32Int32Int32Int32Int32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int, int>> ValueTupleInt32Int32Int32Int32Int32 => c_ValueTupleInt32Int32Int32Int32Int32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, int, int, int>> c_ValueTupleInt32Int32Int32Int32;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="int" />, <see cref="int" />, <see cref="int" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, int, int, int>> ValueTupleInt32Int32Int32Int32 => c_ValueTupleInt32Int32Int32Int32;
    private static readonly bsx::BshoxContract<byte> c_Byte;
    private static readonly bsx::BshoxContract<string> c_String;
    private static readonly bsx::BshoxContract<uint> c_UInt32;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<uint, string, byte>> c_ValueTupleUInt32StringByte;
    /// <summary>
    /// A Bshox contract for (<see cref="uint" />, <see cref="string" />, <see cref="byte" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<uint, string, byte>> ValueTupleUInt32StringByte => c_ValueTupleUInt32StringByte;
    private static readonly bsx::BshoxContract<long> c_Int64;
    private static readonly bsx::BshoxContract<global::System.ValueTuple<int, long>> c_ValueTupleInt32Int64;
    /// <summary>
    /// A Bshox contract for (<see cref="int" />, <see cref="long" />)
    /// </summary>
    public static bsx::BshoxContract<global::System.ValueTuple<int, long>> ValueTupleInt32Int64 => c_ValueTupleInt32Int64;

    /// <summary>
    /// Singleton instance of <see cref="global::TestModels.ValueTupleSerializer" />
    /// </summary>
    public static ValueTupleSerializer Instance { get; } = new ValueTupleSerializer();

    static ValueTupleSerializer()
    {
        c_Int32 = bsx::DefaultContracts.Int32;
        c_ValueTupleInt32Int32 = bsx::DefaultContracts.ValueTuple<int, int>(c_Int32, c_Int32);
        c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32Int32 = bsx::DefaultContracts.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int, int>>(c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_ValueTupleInt32Int32);
        c_ValueTupleInt32 = bsx::DefaultContracts.ValueTuple<int>(c_Int32);
        c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32 = bsx::DefaultContracts.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int>>(c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_ValueTupleInt32);
        c_ValueTupleInt32Int32Int32Int32Int32Int32Int32 = bsx::DefaultContracts.ValueTuple<int, int, int, int, int, int, int>(c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32);
        c_ValueTupleInt32Int32Int32Int32Int32Int32 = bsx::DefaultContracts.ValueTuple<int, int, int, int, int, int>(c_Int32, c_Int32, c_Int32, c_Int32, c_Int32, c_Int32);
        c_ValueTupleInt32Int32Int32Int32Int32 = bsx::DefaultContracts.ValueTuple<int, int, int, int, int>(c_Int32, c_Int32, c_Int32, c_Int32, c_Int32);
        c_ValueTupleInt32Int32Int32Int32 = bsx::DefaultContracts.ValueTuple<int, int, int, int>(c_Int32, c_Int32, c_Int32, c_Int32);
        c_Byte = bsx::DefaultContracts.Byte;
        c_String = bsx::DefaultContracts.String;
        c_UInt32 = bsx::DefaultContracts.UInt32;
        c_ValueTupleUInt32StringByte = bsx::DefaultContracts.ValueTuple<uint, string, byte>(c_UInt32, c_String, c_Byte);
        c_Int64 = bsx::DefaultContracts.Int64;
        c_ValueTupleInt32Int64 = bsx::DefaultContracts.ValueTuple<int, long>(c_Int32, c_Int64);
    }

    protected override bsx::IBshoxContract GetContractInternal(global::System.Type type)
    {
        if (type == typeof(int))
            return c_Int32;
        if (type == typeof(global::System.ValueTuple<int, int>))
            return c_ValueTupleInt32Int32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int, int>>))
            return c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32Int32;
        if (type == typeof(global::System.ValueTuple<int>))
            return c_ValueTupleInt32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int, int, int, int, global::System.ValueTuple<int>>))
            return c_ValueTupleInt32Int32Int32Int32Int32Int32Int32ValueTupleInt32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int, int, int, int>))
            return c_ValueTupleInt32Int32Int32Int32Int32Int32Int32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int, int, int>))
            return c_ValueTupleInt32Int32Int32Int32Int32Int32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int, int>))
            return c_ValueTupleInt32Int32Int32Int32Int32;
        if (type == typeof(global::System.ValueTuple<int, int, int, int>))
            return c_ValueTupleInt32Int32Int32Int32;
        if (type == typeof(byte))
            return c_Byte;
        if (type == typeof(string))
            return c_String;
        if (type == typeof(uint))
            return c_UInt32;
        if (type == typeof(global::System.ValueTuple<uint, string, byte>))
            return c_ValueTupleUInt32StringByte;
        if (type == typeof(long))
            return c_Int64;
        if (type == typeof(global::System.ValueTuple<int, long>))
            return c_ValueTupleInt32Int64;
        return null;
    }
}
