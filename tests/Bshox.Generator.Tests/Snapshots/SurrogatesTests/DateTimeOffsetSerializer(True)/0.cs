// <auto-generated />
#nullable disable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.DateTimeOffsetSerializer;

namespace TestModels;

partial class DateTimeOffsetSerializer
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
    private sealed class TestModels_DateTimeOffsetSurrogate__BshoxContract : bsx::BshoxContract<global::TestModels.DateTimeOffsetSurrogate>
    {
        internal TestModels_DateTimeOffsetSurrogate__BshoxContract() : base(bsx::BshoxCode.SubObject)
        {
        }

        public override void Serialize(ref bsx::BshoxWriter writer, scoped ref readonly global::TestModels.DateTimeOffsetSurrogate value)
        {
            using var _ = writer.DepthLock();
            var __UtcTicks = value.UtcTicks;
            {
                writer.WriteByte(9);
                writer.WriteVarInt64(unchecked((ulong)__UtcTicks));
            }
            var __TotalOffsetMinutes = value.TotalOffsetMinutes;
            if (__TotalOffsetMinutes != 0)
            {
                writer.WriteByte(17);
                writer.WriteVarInt32(unchecked((ushort)__TotalOffsetMinutes));
            }
            writer.WriteByte(0);
        }

        public override void Deserialize(ref bsx::BshoxReader reader, out global::TestModels.DateTimeOffsetSurrogate value)
        {
            long __UtcTicks = default;
            short __TotalOffsetMinutes = 0;
            using var _ = reader.DepthLock();
            while (true)
            {
                uint key = reader.ReadTag(out bsx::BshoxCode encoding);
                switch (key)
                {
                    case 0:
                    {
                        bsx::BshoxException.ThrowIfWrongEncoding(encoding, bsx::BshoxCode.Null);
                        value = new global::TestModels.DateTimeOffsetSurrogate
                        {
                            UtcTicks = __UtcTicks,
                            TotalOffsetMinutes = __TotalOffsetMinutes,
                        };
                        return;
                    }
                    case 1:
                    {
                        bsx::BshoxException.ThrowIfWrongEncoding(encoding, bsx::BshoxCode.VarInt);
                        __UtcTicks = unchecked((long)reader.ReadVarInt64());
                        break;
                    }
                    case 2:
                    {
                        bsx::BshoxException.ThrowIfWrongEncoding(encoding, bsx::BshoxCode.VarInt);
                        __TotalOffsetMinutes = unchecked((short)checked((ushort)reader.ReadVarInt32()));
                        break;
                    }
                    default:
                        reader.SkipValue(encoding);
                        break;
                }
            }
        }
    }
}
