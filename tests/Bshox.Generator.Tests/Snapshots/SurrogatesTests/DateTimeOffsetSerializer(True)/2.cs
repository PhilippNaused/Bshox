// <auto-generated />
#nullable disable
#pragma warning disable

using bsx = global::Bshox;

using _gen_bshox_t = global::TestModels.DateTimeOffsetSerializer;

namespace TestModels;

/// <summary>
/// A source generated Bshox serializer that can serialize the following types:
/// <para><see cref="global::System.DateTimeOffset" /></para>
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Bshox.Generator", "0.0.0.0")]
sealed partial class DateTimeOffsetSerializer : bsx::BshoxSerializer
{
    private static readonly bsx::BshoxContract<global::TestModels.DateTimeOffsetSurrogate> c_DateTimeOffsetSurrogate;
    private static readonly bsx::BshoxContract<global::System.DateTimeOffset> c_DateTimeOffset;
    /// <summary>
    /// A source generated Bshox contract for <see cref="global::System.DateTimeOffset" />
    /// </summary>
    /// <remarks>
    /// This contract is using <see cref="global::TestModels.DateTimeOffsetSurrogate" /> as a surrogate.<br/>
    /// Bshox member layout:
    /// <para><c>1</c>: <see cref="long" /> UtcTicks</para>
    /// <para><c>2</c>: <see cref="short" /> TotalOffsetMinutes (default: <c>0</c>)</para>
    /// </remarks>
    public static bsx::BshoxContract<global::System.DateTimeOffset> DateTimeOffset => c_DateTimeOffset;
    private static readonly bsx::BshoxContract<short> c_Int16;
    private static readonly bsx::BshoxContract<long> c_Int64;

    /// <summary>
    /// Singleton instance of <see cref="global::TestModels.DateTimeOffsetSerializer" />
    /// </summary>
    public static DateTimeOffsetSerializer Instance { get; } = new DateTimeOffsetSerializer();

    static DateTimeOffsetSerializer()
    {
        c_DateTimeOffsetSurrogate = new TestModels_DateTimeOffsetSurrogate__BshoxContract();
        c_DateTimeOffset = new TestModels_DateTimeOffsetSurrogate__SurrogateContract();
        c_Int16 = bsx::DefaultContracts.Int16;
        c_Int64 = bsx::DefaultContracts.Int64;
    }

    protected override bsx::IBshoxContract GetContractInternal(global::System.Type type)
    {
        if (type == typeof(global::TestModels.DateTimeOffsetSurrogate))
            return c_DateTimeOffsetSurrogate;
        if (type == typeof(global::System.DateTimeOffset))
            return c_DateTimeOffset;
        if (type == typeof(short))
            return c_Int16;
        if (type == typeof(long))
            return c_Int64;
        return null;
    }
}
